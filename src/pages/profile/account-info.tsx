import React, { useEffect, useState } from 'react';
import { Input, Button, useSnackbar, Avatar } from 'zmp-ui';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/hooks';
import { useAuthStatus, updateProfile, ZaloUserProfile, autoLoginAndUpsert } from '@/services/auth';

const AccountInfoPage: React.FC = () => {
    const { user, setUser, refreshUser, loading: userLoading } = useAuth();
    const loggedIn = useAuthStatus();
    const navigate = useNavigate();
    const { openSnackbar } = useSnackbar();

    const [name, setName] = useState(user?.name || '');
    const [phone, setPhone] = useState(user?.phone || '');
    const [defaultAddress, setDefaultAddress] = useState(user?.default_address || '');
    const [saving, setSaving] = useState(false);

    useEffect(() => {
        if (!loggedIn) {
            openSnackbar({
                text: 'B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin t√†i kho·∫£n.',
                type: 'warning',
            });
            navigate('/profile');
        }
    }, [loggedIn, navigate, openSnackbar]);

    useEffect(() => {
        if (user) {
            setName(user.name || '');
            setPhone(user.phone || '');
            setDefaultAddress(user.default_address || '');
        }
    }, [user]);

    const handleUpdateProfile = async () => {
        if (!user) return;

        // Validate required fields
        if (!name.trim()) {
            openSnackbar({
                text: 'Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n',
                type: 'warning',
            });
            return;
        }

        if (!phone || !phone.trim()) {
            openSnackbar({
                text: 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i',
                type: 'warning',
            });
            return;
        }

        setSaving(true);
        try {
            // Prepare data - always send all fields
            const updatedUser: Partial<ZaloUserProfile> = {
                id: user.id,
                name: name.trim(),
                phone: phone.trim() || null,
                default_address: defaultAddress.trim() || null,
            };

            console.log('üíæ Saving profile to database:', updatedUser);
            console.log('üìù Raw form data:', { name, phone, defaultAddress });
            console.log('üì± Phone processing:', {
                original: phone,
                trimmed: phone.trim(),
                final: phone.trim() || null,
                isEmpty: phone.trim() === ''
            });

            // Update profile in database
            const updatedProfile = await updateProfile(updatedUser);

            console.log('‚úÖ Profile saved to database successfully:', updatedProfile);

            // Update local state immediately
            setUser(updatedProfile);

            // Dispatch event to notify other components
            window.dispatchEvent(new CustomEvent('user-updated'));

            // Show success message
            openSnackbar({
                text: `‚úÖ ƒê√£ l∆∞u th√¥ng tin th√†nh c√¥ng! Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong trang th√†nh vi√™n.`,
                type: 'success',
            });

            // Navigate back to profile page to show updated info
            setTimeout(() => {
                navigate('/profile');
            }, 1500);

        } catch (error) {
            console.error('‚ùå Failed to save profile to database:', error);
            openSnackbar({
                text: `‚ùå Kh√¥ng th·ªÉ l∆∞u th√¥ng tin: ${error instanceof Error ? error.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh'}`,
                type: 'error',
            });
        } finally {
            setSaving(false);
        }
    };

    if (!loggedIn || userLoading) {
        return (
            <div className="min-h-screen bg-white flex items-center justify-center">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
                    <p>ƒêang t·∫£i th√¥ng tin t√†i kho·∫£n...</p>
                </div>
            </div>
        );
    }

    if (!user) {
        return (
            <div className="min-h-screen bg-white flex items-center justify-center">
                <div className="text-center">
                    <p className="text-red-500 mb-4">Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ng∆∞·ªùi d√πng</p>
                    <button
                        onClick={() => window.location.reload()}
                        className="px-4 py-2 bg-primary text-white rounded"
                    >
                        Th·ª≠ l·∫°i
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-white">
            <div className="p-4">
                <h1 className="text-2xl font-bold mb-4">Th√¥ng tin t√†i kho·∫£n</h1>

                <div className="flex flex-col items-center mt-6 mb-8">
                    <Avatar story="default" size={96} src={user.avatar} />
                    <h2 className="mt-4 text-xl font-bold">{user.name || 'Ng∆∞·ªùi d√πng'}</h2>
                    <p className="text-gray-500">{user.phone || 'Ch∆∞a c√≥ s·ªë ƒëi·ªán tho·∫°i'}</p>
                    {user.default_address && (
                        <p className="text-gray-500 text-sm text-center mt-1 max-w-xs">
                            üìç {user.default_address}
                        </p>
                    )}
                    <div className="mt-3 p-2 bg-green-50 border border-green-200 rounded-lg">
                        <p className="text-xs text-green-700">
                            üí° Th√¥ng tin n√†y s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn khi b·∫°n ƒë·∫∑t h√†ng
                        </p>
                    </div>
                    {/* Last updated indicator */}
                    <div className="mt-2 p-1 bg-blue-50 border border-blue-200 rounded">
                        <p className="text-xs text-blue-600">
                            üïí C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {user.updated_at ? new Date(user.updated_at).toLocaleString('vi-VN') : 'Ch∆∞a c√≥'}
                        </p>
                    </div>
                </div>

                <div className="mt-4 space-y-4">
                    <Input
                        label="T√™n c·ªßa b·∫°n *"
                        type="text"
                        value={name}
                        onChange={(e) => setName(e.target.value)}
                        className="mb-4"
                        placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n"
                    />
                    <Input
                        label="S·ªë ƒëi·ªán tho·∫°i *"
                        type="tel"
                        value={phone}
                        onChange={(e) => setPhone(e.target.value)}
                        className="mb-4"
                        placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    />
                    <div>
                        <label className="block text-sm font-medium mb-1">ƒê·ªãa ch·ªâ nh·∫≠n h√†ng m·∫∑c ƒë·ªãnh</label>
                        <textarea
                            value={defaultAddress}
                            onChange={(e) => setDefaultAddress(e.target.value)}
                            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary"
                            placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ nh·∫≠n h√†ng m·∫∑c ƒë·ªãnh"
                            rows={3}
                        />
                        <p className="text-xs text-gray-500 mt-1">
                            ƒê·ªãa ch·ªâ n√†y s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn khi b·∫°n ƒë·∫∑t h√†ng
                        </p>
                    </div>
                </div>

                <Button
                    fullWidth
                    className="mt-8"
                    onClick={handleUpdateProfile}
                    loading={saving}
                    disabled={saving}
                >
                    C·∫≠p nh·∫≠t th√¥ng tin
                </Button>


                {/* Usage Instructions */}
                <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                    <h3 className="text-sm font-medium text-blue-800 mb-2">üí° C√°ch s·ª≠ d·ª•ng</h3>
                    <ul className="text-xs text-blue-700 space-y-1">
                        <li>‚Ä¢ Th√¥ng tin ·ªü ƒë√¢y s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông ƒëi·ªÅn khi b·∫°n ƒë·∫∑t h√†ng</li>
                        <li>‚Ä¢ B·∫°n v·∫´n c√≥ th·ªÉ ch·ªânh s·ª≠a th√¥ng tin trong trang thanh to√°n</li>
                        <li>‚Ä¢ ƒê·ªãa ch·ªâ m·∫∑c ƒë·ªãnh gi√∫p b·∫°n kh√¥ng c·∫ßn nh·∫≠p l·∫°i m·ªói l·∫ßn ƒë·∫∑t h√†ng</li>
                        <li>‚Ä¢ C√≥ th·ªÉ l∆∞u th√¥ng tin m·ªõi ngay trong trang thanh to√°n</li>
                        <li>‚Ä¢ Th√¥ng tin ƒë∆∞·ª£c l∆∞u an to√†n trong database v√† ƒë·ªìng b·ªô tr√™n t·∫•t c·∫£ thi·∫øt b·ªã</li>
                    </ul>
                </div>
            </div>
        </div>
    );
};

export default AccountInfoPage;
